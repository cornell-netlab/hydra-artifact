header eth_type2_t {
  bit<16> value;
}
header variables_t {
  bit<16> s1_id;
  bit<16> s2_id;
  bool s1_visited;
  bool s1s2_visited;
  bit<6> _pad;
}
struct hydra_header_t {
  eth_type2_t eth_type;
  variables_t variables;
  hops_preamble_t hops_preamble;
  hops_item_t[4] hops;
}
struct hydra_metadata_t {
  
}
parser CheckerHeaderParser(packet_in packet, out hydra_header_t hydra_header,
                           inout hydra_metadata_t hydra_metadata) {
  state parse_eth_type {
    packet.extract(hydra_header.eth_type);
    transition parse_variables;
  }
  state parse_variables {
    packet.extract(hydra_header.variables);
    transition parse_hops_preamble;
  }
  state parse_hops_preamble
    {
    packet.extract(hydra_header.hops_preamble);
    hydra_metadata.num_list_items =
    hydra_header.hops_preamble.num_hops_items;
    transition select(hydra_metadata.num_list_items) {
      0: accept;
      default: parse_hops;
    }
  }
  state parse_hops
    {
    packet.extract(hydra_header.hops.next);
    hydra_metadata.num_list_items = hydra_metadata.num_list_items-1;
    transition select(hydra_metadata.num_list_items) {
      0: accept;
      default: parse_hops;
    }
  }
}
control CheckerHeaderDeparser(packet_out packet,
                              out hydra_header_t hydra_header) {
  apply
    {
    packet.emit(hydra_header.eth_type);
    packet.emit(hydra_header.variables);
    packet.emit(hydra_header.hops_preamble);
    packet.emit(hydra_header.hops);
  }
}
control initControl(in ingress_headers_t hdr,
                    inout checker_header_t checker_header,
                    inout checker_metadata_t checker_metadata) {
  action init_cp_vars(bit<16> switch_id)
    {
    checker_metadata.variables.switch_id = switch_id;
  }
  table tb_init_cp_vars {
    key = {
      
    }
    actions = {
      init_cp_vars;
    }
    size = 2;
  }
  apply
    {
    tb_init_cp_vars.apply();
    hydra_header.eth_type.setValid();
    hydra_header.eth_type.value = ETHERTYPE_CHECKER;
    hydra_header.checker_header_types.setValid();
    hydra_header.hydra_header_types.variables = 1w1;
    hydra_header.variables.setValid();
    hydra_header.variables.s1_id = 0;
    hydra_header.variables.s1_visited = 0;
    hydra_header.variables.s1s2_visited = 0;
    hydra_header.variables.s2_id = 0;
    s1_id = 3;
    s2_id = 4;
    s1_visited = false;
    s1s2_visited = false;
  }
}
control telemetryControl(in ingress_headers_t hdr,
                         inout checker_header_t checker_header,
                         inout checker_metadata_t checker_metadata) {
  action init_cp_vars(bit<16> switch_id)
    {
    checker_metadata.variables.switch_id = switch_id;
  }
  table tb_init_cp_vars {
    key = {
      
    }
    actions = {
      init_cp_vars;
    }
    size = 2;
  }
  apply
    {
    tb_init_cp_vars.apply();
    if (hydra_metadata.switch_id==hydra_header.s1_id) {
      s1_visited = true;
    }
    if
      (hydra_header.s1_visited && hydra_metadata.switch_id==hydra_header.s2_id)
      {
      s1s2_visited = true;
    }
  }
}
control checkerControl(in ingress_headers_t hdr,
                       inout checker_header_t checker_header,
                       inout checker_metadata_t checker_metadata) {
  action init_cp_vars(bit<16> switch_id)
    {
    checker_metadata.variables.switch_id = switch_id;
  }
  table tb_init_cp_vars {
    key = {
      
    }
    actions = {
      init_cp_vars;
    }
    size = 2;
  }
  apply
    {
    tb_init_cp_vars.apply();
    hydra_header.eth_typ.setInvalid();
    hydra_header.hydra_header_types.setInvalid();
    hydra_header.hops_preamble.setInvalid();
    hydra_header.variables.setInvalid();
    if (!hydra_header.s1s2_visited) {
      checker_metadata.reject0 = true;
    }
  }
}

