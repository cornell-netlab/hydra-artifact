header eth_type2_t {
  bit<16> value;
}
header variables_t {
  bit<32> ue_ipv4_addr;
  bit<32> app_ipv4_addr;
  bit<8> app_ip_proto;
  bit<16> app_l4_port;
  bit<8> filtering_action;
}
struct hydra_header_t {
  eth_type2_t eth_type;
  variables_t variables;
  hops_preamble_t hops_preamble;
  hops_item_t[4] hops;
}
struct hydra_metadata_t {
  
}
parser CheckerHeaderParser(packet_in packet, out hydra_header_t hydra_header,
                           inout hydra_metadata_t hydra_metadata) {
  state parse_eth_type {
    packet.extract(hydra_header.eth_type);
    transition parse_variables;
  }
  state parse_variables {
    packet.extract(hydra_header.variables);
    transition parse_hops_preamble;
  }
  state parse_hops_preamble
    {
    packet.extract(hydra_header.hops_preamble);
    hydra_metadata.num_list_items =
    hydra_header.hops_preamble.num_hops_items;
    transition select(hydra_metadata.num_list_items) {
      0: accept;
      default: parse_hops;
    }
  }
  state parse_hops
    {
    packet.extract(hydra_header.hops.next);
    hydra_metadata.num_list_items = hydra_metadata.num_list_items-1;
    transition select(hydra_metadata.num_list_items) {
      0: accept;
      default: parse_hops;
    }
  }
}
control CheckerHeaderDeparser(packet_out packet,
                              out hydra_header_t hydra_header) {
  apply
    {
    packet.emit(hydra_header.eth_type);
    packet.emit(hydra_header.variables);
    packet.emit(hydra_header.hops_preamble);
    packet.emit(hydra_header.hops);
  }
}
control initControl(in ingress_headers_t hdr,
                    inout checker_header_t checker_header,
                    inout checker_metadata_t checker_metadata) {
  apply
    {
    hydra_header.eth_type.setValid();
    hydra_header.eth_type.value = ETHERTYPE_CHECKER;
    hydra_header.checker_header_types.setValid();
    hydra_header.hydra_header_types.variables = 1w1;
    hydra_header.variables.setValid();
    hydra_header.variables.app_ip_proto = 0;
    hydra_header.variables.app_ipv4_addr = 0;
    hydra_header.variables.app_l4_port = 0;
    hydra_header.variables.filtering_action = 0;
    hydra_header.variables.ue_ipv4_addr = 0;
    filtering_action = 0;
    if (@hdr.inner_ipv4.isValid().inner_ipv4_is_valid)
      {
      ue_ipv4_addr = @hdr.inner_ipv4.src_addr.inner_ipv4_src;
      app_ip_proto = @hdr.inner_ipv4.proto.inner_ipv4_proto;
      app_ipv4_addr = @hdr.inner_ipv4.dst_addr.inner_ipv4_dst;
      if (@hdr.inner_tcp.isValid().inner_tcp_is_valid)
        {
        app_l4_port = @hdr.inner_tcp.dport.inner_tcp_dport;
      }else
      {
      if (@hdr.inner_udp.isValid().inner_udp_is_valid)
        {
        app_l4_port = @hdr.inner_udp.dport.inner_udp_dport;
      }
      }
    }else
    {
    if (@hdr.ipv4.isValid().ipv4_is_valid)
      {
      ue_ipv4_addr = @hdr.outer_ipv4.dst_addr.outer_ipv4_dst;
      app_ip_proto = @hdr.outer_ipv4.proto.outer_ipv4_proto;
      app_ipv4_addr = @hdr.outer_ipv4.src_addr.outer_ipv4_src;
      if (@hdr.tcp.isValid().tcp_is_valid)
        {
        app_l4_port = @hdr.outer_tcp.sport.outer_tcp_sport;
      }else
      {
      if (@hdr.udp.isValid().udp_is_valid)
        {
        app_l4_port = @hdr.outer_udp.sport.outer_udp_sport;
      }
      }
    }
    }
    hydra_metadata.filtering_actions_var0 =
    hydra_header.variables.ue_ipv4_addr;
    hydra_metadata.filtering_actions_var1 =
    hydra_header.variables.app_ip_proto;
    hydra_metadata.filtering_actions_var2 =
    hydra_header.variables.app_ipv4_addr;
    hydra_metadata.filtering_actions_var3 =
    hydra_header.variables.app_l4_port;
    tb_lkp_cp_dict_filtering_actions.apply();
    filtering_action = hydra_metadata.filtering_actions;
  }
}
control telemetryControl(in ingress_headers_t hdr,
                         inout checker_header_t checker_header,
                         inout checker_metadata_t checker_metadata) {
  apply { 
  }
}
control checkerControl(in ingress_headers_t hdr,
                       inout checker_header_t checker_header,
                       inout checker_metadata_t checker_metadata) {
  apply
    {
    hydra_header.eth_typ.setInvalid();
    hydra_header.hydra_header_types.setInvalid();
    hydra_header.hops_preamble.setInvalid();
    hydra_header.variables.setInvalid();
    if
      (hydra_header.filtering_action==1 && @eg_dprsr_md.drop_ctl.drop_ctl!=1)
      {
      checker_metadata.reject0 = true;
    }
    if
      (hydra_header.filtering_action==2 && @eg_dprsr_md.drop_ctl.drop_ctl==1)
      { 
    }
  }
}

